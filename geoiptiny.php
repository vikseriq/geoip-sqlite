<?php
/**
 * Client class for SQLite3 geoip database generated by geosqlfactory.
 *
 * @author vikseriq
 * @link https://github.com/vikseriq/geoip-sqlite
 * @license MIT
 */
namespace vikseriq\GeoipSqlite;

class GeoipTiny
{
    const SQL_TABLE_RANGES = 'geoip_ranges';
    const SQL_TABLE_LOCATIONS = 'geoip_locations';

    /**
     * @var \SQLite3 Database connection
     */
    protected $dbo = null;

    /**
     * GeoipTiny constructor.
     *
     * @param string $sqlite_path Path to prepared sqlite3 database
     * @throws \Exception
     */
    function __construct($sqlite_path)
    {
        // check for SQLite3
        if (!class_exists('Sqlite3')) {
            throw new \Exception('SQLite3 extension must be installed and enabled.');
        }

        // connect
        $this->dbo = new \SQLite3($sqlite_path, SQLITE3_OPEN_READONLY);
        if (!$this->dbo) {
            throw new \Exception('GeoIP database not available.');
        }
    }

    /**
     * Get geoip details by ip address
     *
     * Returning array:
     * location_id      - maxmind internal location id,
     * continent_code   - ISO code of continent,
     * continent_name   - localized name of continent,
     * country_iso_code - ISO code of country,
     * country_name     - localized name of country,
     * locales_json     - json of localisation strings
     * locales          - decoded json array of locales_json, indexes are locales
     *
     * @param string $ip_addr IP address, like 77.88.8.8
     * @param string $locale Locale used to fill *_name fields.
     *                        If none provided or not found- use primary from sql table.
     * @return array|null
     */
    function resolve($ip_addr, $locale = '')
    {
        // convert string ip to integer form
        if (!is_numeric($ip_addr)) {
            $ip_addr = ip2long($ip_addr);
        }
        if (!$ip_addr) {
            // invalid address
            return null;
        }

        // query
        $row = $this->dbo->querySingle(sprintf('SELECT location.* 
        FROM %s location, %s ranges  
        WHERE (%d BETWEEN ranges.ip_start AND ranges.ip_end)
            AND location.location_id = ranges.location_id',
            self::SQL_TABLE_LOCATIONS, self::SQL_TABLE_RANGES, (int)$ip_addr
        ), true);

        if (!$row) {
            // nothing found
            return null;
        }

        // decode & fill locales
        if (function_exists('json_decode')) {
            $row['locales'] = json_decode($row['locales_json'], true);
            if ($locale && isset($row['locales'][$locale])) {
                foreach ($row['locales'][$locale] as $k => $v) {
                    // localize strings
                    $row[$k] = $v;
                }
            }
        }

        return $row;
    }

    /**
     * Get country ISO code by IP address or null if none.
     *
     * @param string $ip_addr
     * @return string|null
     */
    function getCountry($ip_addr)
    {
        $row = $this->resolve($ip_addr);
        if ($row) {
            return $row['country_iso_code'];
        }
        return null;
    }
}